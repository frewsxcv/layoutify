#!/usr/bin/env python

"""
Generate a JSON based graph that is layed out based on input graph
"""

import json
import logging
import sys
from argparse import ArgumentParser

import igraph


def generate_format(input_file):
    """
    Generate the graph structure that will be serialized
    """
    logging.debug("Reading graph file")
    graph = igraph.read(input_file)

    logging.debug("Generating layout")
    layout = graph.layout("fr3d")

    output = {
        "directed": graph.is_directed(),
        "nodes": [],
        "edges": [],
    }

    for i, vertex in enumerate(graph.vs):
        output["nodes"].append([
            layout[i],
            vertex.attributes(),
        ])

    for edge in graph.es:
        output["edges"].append([
            edge.source,
            edge.target,
            edge.attributes(),
        ])

    return output


def run():
    """
    Run the layoutify utility
    """
    parser = ArgumentParser()
    parser.add_argument("-o", "--output-file", dest="output_file")
    parser.add_argument("-v", "--verbose", action="store_true", dest="verbose")
    parser.add_argument("input_file")
    args = parser.parse_args()

    input_file = open(args.input_file)

    if args.verbose:
        logging.basicConfig(level=logging.DEBUG)

    if args.output_file is not None:
        output_file = open(args.output_file, "w")
    else:
        output_file = sys.stdout

    format_ = generate_format(input_file)

    output_file.write(json.dumps(format_))

    output_file.close()


if __name__ == "__main__":
    run()
